package ${shared.package};

import com.github.terefang.ncs.common.NcsCodecHelper;
import com.github.terefang.ncs.common.NcsHelper;
import com.github.terefang.ncs.common.packet.NcsPacket;
import com.github.terefang.ncs.lib.packet.*;

import io.netty.buffer.ByteBuf;
import lombok.SneakyThrows;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Vector;

import com.github.terefang.ncs.common.XUID;

public class ${name}Packet extends OpcodePojoNcsPacketBase implements NcsPacket
{
    public static final long PACKET_DOMAIN = ${opcode_domain};
    public static final int PACKET_CATEGORY = ${opcode_category};
    public static final int PACKET_OPCODE = ${opcode};

    public static class Factory implements OpcodePojoNcsPacketFactoryInterface
    {
        @Override
        public NcsPacket unpack(ByteBuf _buf) {
            return ${name}Packet.from(_buf);
        }
    }

    public static void register(OpcodePojoNcsPacketFactory _reg)
    {
        _reg.register(XUID.from(${name}Packet.PACKET_DOMAIN, ${name}Packet.PACKET_CATEGORY, ${name}Packet.PACKET_OPCODE), new Factory());
    }

    /**
     * create a packet
     * @return the packet
     */
    public static ${name}Packet create()
    {
        ${name}Packet _pkt = new ${name}Packet();
        _pkt.setOpcode(XUID.from(${name}Packet.PACKET_DOMAIN, ${name}Packet.PACKET_CATEGORY, ${name}Packet.PACKET_OPCODE));
        return _pkt;
    }

    /**
     * create a packet from an array of bytes
     * @param _buf  byte array
     * @return the packet
     */
    public static ${name}Packet from(byte[] _buf)
    {
        ${name}Packet _pkt = ${name}Packet.create();
        _pkt._buf = new byte[_buf.length];
        System.arraycopy(_buf, 0, _pkt._buf, 0, _buf.length);
        _pkt.populate();
        return _pkt;
    }

    /**
     * create a packet from a buffer of bytes
     * @param _buf  byte buffer
     * @return the packet
     */
    public static ${name}Packet from(ByteBuf _buf)
    {
        ${name}Packet _pkt = ${name}Packet.create();
        _pkt._buf = new byte[_buf.readableBytes()];
        _buf.readBytes(_pkt._buf);
        _pkt.populate();
        return _pkt;
    }

<#list struct?keys as k>
    <#if _.equalsIgnoreCase(struct[k],'string')>
        // String
        private String ${__.toCamelCase(k, false, '-')} ;
        public String get${__.toCamelCase(k, true, '-')}() { return this.${__.toCamelCase(k, false, '-')}; }
        public void set${__.toCamelCase(k, true, '-')}(String _v) { this.${__.toCamelCase(k, false, '-')} = _v; }
    <#else>
        // TODO: unknown type
        private ${struct[k]} ${__.toCamelCase(k, false, '-')} ;
        public ${struct[k]} get${__.toCamelCase(k, true, '-')}() { return this.${__.toCamelCase(k, false, '-')}; }
        public void set${__.toCamelCase(k, true, '-')}(${struct[k]} _v) { this.${__.toCamelCase(k, false, '-')} = _v; }
    </#if>
</#list>

    @Override @SneakyThrows
    public byte[] serialize()
    {
        ByteArrayOutputStream _baos = new ByteArrayOutputStream();
        DataOutputStream _daos = new DataOutputStream(_baos);
        this.getOpcode().writeTo(_daos);
<#list struct?keys as k>
    <#if _.equalsIgnoreCase(struct[k],'string')>
        // String
        NcsCodecHelper.writeVarString(_daos, this.${__.toCamelCase(k, false, '-')});
    <#else>
        // TODO: unknown type
        NcsCodecHelper.write${__.toCamelCase(struct[k], true, '-')}(_daos, this.${__.toCamelCase(k, false, '-')});
    </#if>
</#list>
        _daos.flush();
        //this._buf = _baos.toByteArray();
        //return this._buf;
        return _baos.toByteArray();
    }

    @SneakyThrows
    public void populate()
    {
        ByteArrayInputStream _bais = new ByteArrayInputStream(this._buf);
        DataInputStream _dais = new DataInputStream(_bais);
        this.setOpcode(NcsCodecHelper.readXUID(_dais));
<#list struct?keys as k>
    <#if _.equalsIgnoreCase(struct[k],'string')>
        // String
        this.${__.toCamelCase(k, false, '-')} = NcsCodecHelper.readVarString(_dais);
    <#else>
        // TODO: unknown type
        this.${__.toCamelCase(k, false, '-')} = NcsCodecHelper.read${__.toCamelCase(struct[k], true, '-')}(_dais);
    </#if>
</#list>
        _dais.close();
        _bais.close();
    }
}